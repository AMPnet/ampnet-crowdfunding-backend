buildscript {
    ext {
        kotlinVersion = '1.3.21'
        springBootVersion = '2.1.3.RELEASE'
        junitVersion = '5.3.2'
        grpcVersion = '1.19.0'
        jjwtVersion = '0.10.6'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.7")
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
}

plugins {
    id 'com.google.cloud.tools.jib' version '1.0.2'
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'jacoco'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

group = 'com.ampnet'
version = '0.0.5'
description = "crowdfunding-backend"

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

configurations {
    ktlint
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.3"
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile('org.springframework.boot:spring-boot-starter-mail')
    kapt "org.springframework.boot:spring-boot-configuration-processor"
    compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    compile("org.springframework.social:spring-social-facebook:2.0.3.RELEASE")
    compile('com.github.spring-social:spring-social-google:1.1.3')

    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    compile('com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8')
    compile("io.jsonwebtoken:jjwt-jackson:${jjwtVersion}")
    runtime("io.jsonwebtoken:jjwt-impl:${jjwtVersion}")
    compile('org.flywaydb:flyway-core:5.2.4')
    compile('org.postgresql:postgresql:42.2.5')
    compile('io.github.microutils:kotlin-logging:1.6.25')
    compile('com.github.ipfs:java-ipfs-http-client:v1.2.3')

    compile('net.devh:grpc-client-spring-boot-starter:2.2.1.RELEASE') exclude group: 'io.grpc', module: 'grpc-netty'
    compile("io.grpc:grpc-netty-shaded:${grpcVersion}")

    compile('io.micrometer:micrometer-registry-prometheus:1.1.3')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
    testCompile("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testCompile("org.junit.jupiter:junit-jupiter-params:$junitVersion")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    testCompile('org.subethamail:subethasmtp:3.1.7')

    ktlint "com.github.shyiko:ktlint:0.30.0"
}
compileJava.dependsOn(processResources)

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.7.0' }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

task copyDocs(type: Copy) {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") into 'src/main/resources/static/docs'
}

jib {
    to {
        image = "ampnet/crowdfunding-backend:${version}"
        auth {
            username = "${System.env.DOCKER_USERNAME}"
            password = "${System.env.DOCKER_PASSWORD}"
        }
        tags = ["latest"]
    }
    container.useCurrentTimestamp = true
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

asciidoctor {
    dependsOn test
    attributes 'snippets': file('build/generated-snippets')
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco/html")
    }
    sourceDirectories.from = files(["${project.projectDir}/src/main/kotlin"])
    classDirectories.from = fileTree(dir: "${buildDir}/classes/kotlin/main", 
        excludes: ['**/model/**', '**/pojo/**', '**/blockchain/**', '**/ipfs/**'])
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.from = fileTree(dir: "${buildDir}/classes/kotlin/main", 
            excludes: ['blockchain/**', '**/proto/**'])
    }
    violationRules {
        rule {
            limit {
                minimum = 0.7
            }
        }
    }
}
jacocoTestCoverageVerification.mustRunAfter jacocoTestReport

task qualityCheck(type: GradleBuild) {
    tasks = ['ktlintFormat', 'jacocoTestReport', 'jacocoTestCoverageVerification']
}
